/* tslint:disable */
/* eslint-disable */
/**
 * Coin bot Api
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface BotTriggerActivationControllerTriggerOneRequest {
    uuid: string;
}

/**
 * BotTriggerApi - interface
 * 
 * @export
 * @interface BotTriggerApiInterface
 */
export interface BotTriggerApiInterface {
    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotTriggerApiInterface
     */
    botTriggerActivationControllerTriggerOneRaw(requestParameters: BotTriggerActivationControllerTriggerOneRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    botTriggerActivationControllerTriggerOne(requestParameters: BotTriggerActivationControllerTriggerOneRequest): Promise<void>;

}

/**
 * 
 */
export class BotTriggerApi extends runtime.BaseAPI implements BotTriggerApiInterface {

    /**
     */
    async botTriggerActivationControllerTriggerOneRaw(requestParameters: BotTriggerActivationControllerTriggerOneRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling botTriggerActivationControllerTriggerOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bot-trigger-activation/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async botTriggerActivationControllerTriggerOne(requestParameters: BotTriggerActivationControllerTriggerOneRequest): Promise<void> {
        await this.botTriggerActivationControllerTriggerOneRaw(requestParameters);
    }

}
