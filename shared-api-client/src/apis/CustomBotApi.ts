/* tslint:disable */
/* eslint-disable */
/**
 * Coin bot Api
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateCustomBotDto,
    CreateCustomBotDtoFromJSON,
    CreateCustomBotDtoToJSON,
    UpdateCustomBotDto,
    UpdateCustomBotDtoFromJSON,
    UpdateCustomBotDtoToJSON,
} from '../models';

export interface CustomBotControllerCreateRequest {
    createCustomBotDto: CreateCustomBotDto;
}

export interface CustomBotControllerFindOneRequest {
    uuid: string;
}

export interface CustomBotControllerRemoveRequest {
    uuid: string;
}

export interface CustomBotControllerTriggerRequest {
    uuid: string;
}

export interface CustomBotControllerUpdateRequest {
    uuid: string;
    updateCustomBotDto: UpdateCustomBotDto;
}

/**
 * CustomBotApi - interface
 * 
 * @export
 * @interface CustomBotApiInterface
 */
export interface CustomBotApiInterface {
    /**
     * 
     * @param {CreateCustomBotDto} createCustomBotDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApiInterface
     */
    customBotControllerCreateRaw(requestParameters: CustomBotControllerCreateRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    customBotControllerCreate(requestParameters: CustomBotControllerCreateRequest): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApiInterface
     */
    customBotControllerFindAllRaw(): Promise<runtime.ApiResponse<void>>;

    /**
     */
    customBotControllerFindAll(): Promise<void>;

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApiInterface
     */
    customBotControllerFindOneRaw(requestParameters: CustomBotControllerFindOneRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    customBotControllerFindOne(requestParameters: CustomBotControllerFindOneRequest): Promise<void>;

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApiInterface
     */
    customBotControllerRemoveRaw(requestParameters: CustomBotControllerRemoveRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    customBotControllerRemove(requestParameters: CustomBotControllerRemoveRequest): Promise<void>;

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApiInterface
     */
    customBotControllerTriggerRaw(requestParameters: CustomBotControllerTriggerRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    customBotControllerTrigger(requestParameters: CustomBotControllerTriggerRequest): Promise<void>;

    /**
     * 
     * @param {string} uuid 
     * @param {UpdateCustomBotDto} updateCustomBotDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApiInterface
     */
    customBotControllerUpdateRaw(requestParameters: CustomBotControllerUpdateRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    customBotControllerUpdate(requestParameters: CustomBotControllerUpdateRequest): Promise<void>;

}

/**
 * 
 */
export class CustomBotApi extends runtime.BaseAPI implements CustomBotApiInterface {

    /**
     */
    async customBotControllerCreateRaw(requestParameters: CustomBotControllerCreateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createCustomBotDto === null || requestParameters.createCustomBotDto === undefined) {
            throw new runtime.RequiredError('createCustomBotDto','Required parameter requestParameters.createCustomBotDto was null or undefined when calling customBotControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/custom-bot`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomBotDtoToJSON(requestParameters.createCustomBotDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customBotControllerCreate(requestParameters: CustomBotControllerCreateRequest): Promise<void> {
        await this.customBotControllerCreateRaw(requestParameters);
    }

    /**
     */
    async customBotControllerFindAllRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/custom-bot`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customBotControllerFindAll(): Promise<void> {
        await this.customBotControllerFindAllRaw();
    }

    /**
     */
    async customBotControllerFindOneRaw(requestParameters: CustomBotControllerFindOneRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling customBotControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/custom-bot/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customBotControllerFindOne(requestParameters: CustomBotControllerFindOneRequest): Promise<void> {
        await this.customBotControllerFindOneRaw(requestParameters);
    }

    /**
     */
    async customBotControllerRemoveRaw(requestParameters: CustomBotControllerRemoveRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling customBotControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/custom-bot/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customBotControllerRemove(requestParameters: CustomBotControllerRemoveRequest): Promise<void> {
        await this.customBotControllerRemoveRaw(requestParameters);
    }

    /**
     */
    async customBotControllerTriggerRaw(requestParameters: CustomBotControllerTriggerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling customBotControllerTrigger.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/custom-bot/trigger/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customBotControllerTrigger(requestParameters: CustomBotControllerTriggerRequest): Promise<void> {
        await this.customBotControllerTriggerRaw(requestParameters);
    }

    /**
     */
    async customBotControllerUpdateRaw(requestParameters: CustomBotControllerUpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling customBotControllerUpdate.');
        }

        if (requestParameters.updateCustomBotDto === null || requestParameters.updateCustomBotDto === undefined) {
            throw new runtime.RequiredError('updateCustomBotDto','Required parameter requestParameters.updateCustomBotDto was null or undefined when calling customBotControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/custom-bot/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCustomBotDtoToJSON(requestParameters.updateCustomBotDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customBotControllerUpdate(requestParameters: CustomBotControllerUpdateRequest): Promise<void> {
        await this.customBotControllerUpdateRaw(requestParameters);
    }

}
