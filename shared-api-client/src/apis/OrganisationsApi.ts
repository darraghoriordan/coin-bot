/* tslint:disable */
/* eslint-disable */
/**
 * Coin bot Api
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateOrganisationDto,
    CreateOrganisationDtoFromJSON,
    CreateOrganisationDtoToJSON,
    Organisation,
    OrganisationFromJSON,
    OrganisationToJSON,
    UpdateOrganisationDto,
    UpdateOrganisationDtoFromJSON,
    UpdateOrganisationDtoToJSON,
} from '../models';

export interface OrganisationControllerCreateRequest {
    createOrganisationDto: CreateOrganisationDto;
}

export interface OrganisationControllerFindOneRequest {
    id: string;
}

export interface OrganisationControllerRemoveRequest {
    id: string;
}

export interface OrganisationControllerUpdateRequest {
    id: string;
    updateOrganisationDto: UpdateOrganisationDto;
}

/**
 * OrganisationsApi - interface
 * 
 * @export
 * @interface OrganisationsApiInterface
 */
export interface OrganisationsApiInterface {
    /**
     * 
     * @param {CreateOrganisationDto} createOrganisationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApiInterface
     */
    organisationControllerCreateRaw(requestParameters: OrganisationControllerCreateRequest): Promise<runtime.ApiResponse<Organisation>>;

    /**
     */
    organisationControllerCreate(requestParameters: OrganisationControllerCreateRequest): Promise<Organisation>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApiInterface
     */
    organisationControllerFindAllRaw(): Promise<runtime.ApiResponse<Array<Organisation>>>;

    /**
     */
    organisationControllerFindAll(): Promise<Array<Organisation>>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApiInterface
     */
    organisationControllerFindOneRaw(requestParameters: OrganisationControllerFindOneRequest): Promise<runtime.ApiResponse<Organisation>>;

    /**
     */
    organisationControllerFindOne(requestParameters: OrganisationControllerFindOneRequest): Promise<Organisation>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApiInterface
     */
    organisationControllerRemoveRaw(requestParameters: OrganisationControllerRemoveRequest): Promise<runtime.ApiResponse<Organisation>>;

    /**
     */
    organisationControllerRemove(requestParameters: OrganisationControllerRemoveRequest): Promise<Organisation>;

    /**
     * 
     * @param {string} id 
     * @param {UpdateOrganisationDto} updateOrganisationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApiInterface
     */
    organisationControllerUpdateRaw(requestParameters: OrganisationControllerUpdateRequest): Promise<runtime.ApiResponse<Organisation>>;

    /**
     */
    organisationControllerUpdate(requestParameters: OrganisationControllerUpdateRequest): Promise<Organisation>;

}

/**
 * 
 */
export class OrganisationsApi extends runtime.BaseAPI implements OrganisationsApiInterface {

    /**
     */
    async organisationControllerCreateRaw(requestParameters: OrganisationControllerCreateRequest): Promise<runtime.ApiResponse<Organisation>> {
        if (requestParameters.createOrganisationDto === null || requestParameters.createOrganisationDto === undefined) {
            throw new runtime.RequiredError('createOrganisationDto','Required parameter requestParameters.createOrganisationDto was null or undefined when calling organisationControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganisationDtoToJSON(requestParameters.createOrganisationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerCreate(requestParameters: OrganisationControllerCreateRequest): Promise<Organisation> {
        const response = await this.organisationControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerFindAllRaw(): Promise<runtime.ApiResponse<Array<Organisation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationFromJSON));
    }

    /**
     */
    async organisationControllerFindAll(): Promise<Array<Organisation>> {
        const response = await this.organisationControllerFindAllRaw();
        return await response.value();
    }

    /**
     */
    async organisationControllerFindOneRaw(requestParameters: OrganisationControllerFindOneRequest): Promise<runtime.ApiResponse<Organisation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerFindOne(requestParameters: OrganisationControllerFindOneRequest): Promise<Organisation> {
        const response = await this.organisationControllerFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerRemoveRaw(requestParameters: OrganisationControllerRemoveRequest): Promise<runtime.ApiResponse<Organisation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerRemove(requestParameters: OrganisationControllerRemoveRequest): Promise<Organisation> {
        const response = await this.organisationControllerRemoveRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerUpdateRaw(requestParameters: OrganisationControllerUpdateRequest): Promise<runtime.ApiResponse<Organisation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerUpdate.');
        }

        if (requestParameters.updateOrganisationDto === null || requestParameters.updateOrganisationDto === undefined) {
            throw new runtime.RequiredError('updateOrganisationDto','Required parameter requestParameters.updateOrganisationDto was null or undefined when calling organisationControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organisation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganisationDtoToJSON(requestParameters.updateOrganisationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerUpdate(requestParameters: OrganisationControllerUpdateRequest): Promise<Organisation> {
        const response = await this.organisationControllerUpdateRaw(requestParameters);
        return await response.value();
    }

}
