/* tslint:disable */
/* eslint-disable */
/**
 * Coin bot Api
 * Describes the backend api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateTriggerDto,
    CreateTriggerDtoFromJSON,
    CreateTriggerDtoToJSON,
    Trigger,
    TriggerFromJSON,
    TriggerToJSON,
    UpdateTriggerDto,
    UpdateTriggerDtoFromJSON,
    UpdateTriggerDtoToJSON,
} from '../models';

export interface TriggerControllerCreateRequest {
    botuuid: string;
    createTriggerDto: CreateTriggerDto;
}

export interface TriggerControllerRemoveRequest {
    botuuid: string;
    triggeruuid: string;
}

export interface TriggerControllerUpdateRequest {
    botuuid: string;
    updateTriggerDto: UpdateTriggerDto;
}

/**
 * TriggersApi - interface
 * 
 * @export
 * @interface TriggersApiInterface
 */
export interface TriggersApiInterface {
    /**
     * 
     * @param {string} botuuid 
     * @param {CreateTriggerDto} createTriggerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApiInterface
     */
    triggerControllerCreateRaw(requestParameters: TriggerControllerCreateRequest): Promise<runtime.ApiResponse<Trigger>>;

    /**
     */
    triggerControllerCreate(requestParameters: TriggerControllerCreateRequest): Promise<Trigger>;

    /**
     * 
     * @param {string} botuuid 
     * @param {string} triggeruuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApiInterface
     */
    triggerControllerRemoveRaw(requestParameters: TriggerControllerRemoveRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    triggerControllerRemove(requestParameters: TriggerControllerRemoveRequest): Promise<void>;

    /**
     * 
     * @param {string} botuuid 
     * @param {UpdateTriggerDto} updateTriggerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApiInterface
     */
    triggerControllerUpdateRaw(requestParameters: TriggerControllerUpdateRequest): Promise<runtime.ApiResponse<Trigger>>;

    /**
     */
    triggerControllerUpdate(requestParameters: TriggerControllerUpdateRequest): Promise<Trigger>;

}

/**
 * 
 */
export class TriggersApi extends runtime.BaseAPI implements TriggersApiInterface {

    /**
     */
    async triggerControllerCreateRaw(requestParameters: TriggerControllerCreateRequest): Promise<runtime.ApiResponse<Trigger>> {
        if (requestParameters.botuuid === null || requestParameters.botuuid === undefined) {
            throw new runtime.RequiredError('botuuid','Required parameter requestParameters.botuuid was null or undefined when calling triggerControllerCreate.');
        }

        if (requestParameters.createTriggerDto === null || requestParameters.createTriggerDto === undefined) {
            throw new runtime.RequiredError('createTriggerDto','Required parameter requestParameters.createTriggerDto was null or undefined when calling triggerControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/custom-bot/{botuuid}/trigger`.replace(`{${"botuuid"}}`, encodeURIComponent(String(requestParameters.botuuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTriggerDtoToJSON(requestParameters.createTriggerDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TriggerFromJSON(jsonValue));
    }

    /**
     */
    async triggerControllerCreate(requestParameters: TriggerControllerCreateRequest): Promise<Trigger> {
        const response = await this.triggerControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async triggerControllerRemoveRaw(requestParameters: TriggerControllerRemoveRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.botuuid === null || requestParameters.botuuid === undefined) {
            throw new runtime.RequiredError('botuuid','Required parameter requestParameters.botuuid was null or undefined when calling triggerControllerRemove.');
        }

        if (requestParameters.triggeruuid === null || requestParameters.triggeruuid === undefined) {
            throw new runtime.RequiredError('triggeruuid','Required parameter requestParameters.triggeruuid was null or undefined when calling triggerControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/custom-bot/{botuuid}/trigger/{triggeruuid}`.replace(`{${"botuuid"}}`, encodeURIComponent(String(requestParameters.botuuid))).replace(`{${"triggeruuid"}}`, encodeURIComponent(String(requestParameters.triggeruuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async triggerControllerRemove(requestParameters: TriggerControllerRemoveRequest): Promise<void> {
        await this.triggerControllerRemoveRaw(requestParameters);
    }

    /**
     */
    async triggerControllerUpdateRaw(requestParameters: TriggerControllerUpdateRequest): Promise<runtime.ApiResponse<Trigger>> {
        if (requestParameters.botuuid === null || requestParameters.botuuid === undefined) {
            throw new runtime.RequiredError('botuuid','Required parameter requestParameters.botuuid was null or undefined when calling triggerControllerUpdate.');
        }

        if (requestParameters.updateTriggerDto === null || requestParameters.updateTriggerDto === undefined) {
            throw new runtime.RequiredError('updateTriggerDto','Required parameter requestParameters.updateTriggerDto was null or undefined when calling triggerControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/custom-bot/{botuuid}/trigger`.replace(`{${"botuuid"}}`, encodeURIComponent(String(requestParameters.botuuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTriggerDtoToJSON(requestParameters.updateTriggerDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TriggerFromJSON(jsonValue));
    }

    /**
     */
    async triggerControllerUpdate(requestParameters: TriggerControllerUpdateRequest): Promise<Trigger> {
        const response = await this.triggerControllerUpdateRaw(requestParameters);
        return await response.value();
    }

}
